import fs from 'fs';
import path from 'path';
import sharp from 'sharp';

const supportedFormats = ['.png', '.jpg', '.jpeg'];

async function getAllFiles(dirPath) {
    const entries = await fs.promises.readdir(dirPath, { withFileTypes: true });
    const files = await Promise.all(entries.map(async (entry) => {
        const fullPath = path.join(dirPath, entry.name);
        return entry.isDirectory() ? await getAllFiles(fullPath) : fullPath;
    }));
    return files.flat();
}

async function convertImages(quality = 80) { // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 80
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (0-100)
        const qualityValue = Math.max(0, Math.min(100, parseInt(quality)));
        if (isNaN(qualityValue)) {
            console.log('‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 80');
        }

        const rootDir = process.cwd();
        const allFiles = await getAllFiles(rootDir);

        if (allFiles.length === 0) {
            console.log('‚ÑπÔ∏è –í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.');
            return;
        }

        for (const file of allFiles) {
            const ext = path.extname(file).toLowerCase();
            const dirPath = path.dirname(file);
            const outputFileName = path.basename(file, ext) + '.webp';
            const outputFilePath = path.join(dirPath, outputFileName);

            if (supportedFormats.includes(ext)) {
                try {
                    const metadata = await sharp(file).metadata();

                    let sharpInstance = sharp(file);

                    if (metadata.width > 1920 || metadata.height > 1080) {
                        sharpInstance = sharpInstance.resize({
                            width: metadata.width > 1920 ? 1920 : undefined,
                            height: metadata.height > 1080 ? 1080 : undefined,
                            fit: 'inside',
                        });
                    }

                    await sharpInstance
                        .webp({ quality: qualityValue }) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                        .toFile(outputFilePath);

                    // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
                    await fs.promises.unlink(file);

                    console.log(`‚úÖ ${file} —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ ${outputFileName} —Å –∫–∞—á–µ—Å—Ç–≤–æ–º ${qualityValue}% –∏ —É–¥–∞–ª—ë–Ω.`);
                } catch (err) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ${file}:`, err);
                }
            } else {
                // console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª ${file} (–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${ext})`);
            }
        }

        console.log(`üéâ –í—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º ${qualityValue}% –∏ —É–¥–∞–ª–µ–Ω—ã!`);
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤:', err);
    }
}

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const qualityArg = process.argv[2];
convertImages(qualityArg);